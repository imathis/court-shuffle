#!/usr/bin/env node

import { writeFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const rootDir = join(__dirname, '..')

const directions = [
  { short: 't', long: 'top', property: 'padding-top' },
  { short: 'r', long: 'right', property: 'padding-right' },
  { short: 'b', long: 'bottom', property: 'padding-bottom' },
  { short: 'l', long: 'left', property: 'padding-left' }
]

function generateSafeAreas() {
  let css = `/* Safe Area Utilities - Auto-generated */
/* This file is generated by scripts/generate-safe-areas.js */

/* Safe area theme variables */
@theme {
  --spacing-safe-t: env(safe-area-inset-top);
  --spacing-safe-r: env(safe-area-inset-right);
  --spacing-safe-b: env(safe-area-inset-bottom);
  --spacing-safe-l: env(safe-area-inset-left);
}

/* Basic safe area utilities */
@utility pt-safe {
  padding-top: env(safe-area-inset-top);
}

@utility pr-safe {
  padding-right: env(safe-area-inset-right);
}

@utility pb-safe {
  padding-bottom: env(safe-area-inset-bottom);
}

@utility pl-safe {
  padding-left: env(safe-area-inset-left);
}

@utility px-safe {
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
}

@utility py-safe {
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
}

/* Minimum fallback utilities with wildcards */
`

  // Generate minimum fallback utilities with wildcards
  for (const dir of directions) {
    css += `@utility p${dir.short}-safe-min-* {
  ${dir.property}: max(env(safe-area-inset-${dir.long}), --spacing(--value(number)));
}

`
  }

  css += `@utility px-safe-min-* {
  padding-left: max(env(safe-area-inset-left), --spacing(--value(number)));
  padding-right: max(env(safe-area-inset-right), --spacing(--value(number)));
}

@utility py-safe-min-* {
  padding-top: max(env(safe-area-inset-top), --spacing(--value(number)));
  padding-bottom: max(env(safe-area-inset-bottom), --spacing(--value(number)));
}

/* Additive utilities with wildcards */
`

  // Generate additive utilities with wildcards
  for (const dir of directions) {
    css += `@utility p${dir.short}-safe-* {
  ${dir.property}: calc(env(safe-area-inset-${dir.long}) + --spacing(--value(number)));
}

`
  }

  css += `@utility px-safe-* {
  padding-left: calc(env(safe-area-inset-left) + --spacing(--value(number)));
  padding-right: calc(env(safe-area-inset-right) + --spacing(--value(number)));
}

@utility py-safe-* {
  padding-top: calc(env(safe-area-inset-top) + --spacing(--value(number)));
  padding-bottom: calc(env(safe-area-inset-bottom) + --spacing(--value(number)));
}
`

  // Write the generated CSS
  const outputPath = join(rootDir, 'src/styles/safe-areas.css')
  writeFileSync(outputPath, css)
  
  console.log('✅ Safe area utilities generated successfully!')
  console.log(`📁 Output: ${outputPath}`)
  
  // Count the number of utilities generated
  const utilityCount = (css.match(/@utility\s+[a-z0-9-*]+\s*{/g) || []).length
  console.log(`🔢 Generated ${utilityCount} utility patterns + 4 theme variables`)
  console.log(`📊 Breakdown:`)
  console.log(`   - 4 theme variables (--spacing-safe-t, --spacing-safe-r, --spacing-safe-b, --spacing-safe-l)`)
  console.log(`   - 6 basic utilities (pt-safe, pr-safe, pb-safe, pl-safe, px-safe, py-safe)`)
  console.log(`   - 6 minimum fallback wildcard utilities (p*-safe-min-*)`)
  console.log(`   - 6 additive wildcard utilities (p*-safe-*)`)
  console.log('🎯 Each wildcard utility accepts any numeric value for infinite possibilities!')
  console.log('💡 Theme variables can be used anywhere spacing is accepted!')
}

try {
  generateSafeAreas()
} catch (error) {
  console.error('❌ Error generating safe area utilities:', error)
  process.exit(1)
}